using System;

using UIKit;
using Foundation;
using ObjCRuntime;
using CoreGraphics;
using Photos;

namespace Facebook.ShareKit {
	// @interface FBSDKAppGroupAddDialog : NSObject
	[BaseType (typeof (NSObject),
		Name = "FBSDKAppGroupAddDialog",
		Delegates = new [] { "Delegate" },
		Events = new [] { typeof (AppGroupAddDialogDelegate) })]
	[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
	interface AppGroupAddDialog {

		// +(instancetype)showWithContent:(FBSDKAppGroupContent *)content delegate:(id<FBSDKAppGroupAddDialogDelegate>)delegate;
		[Static]
		[Export ("showWithContent:delegate:")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		AppGroupAddDialog Show ([NullAllowed] AppGroupContent content, [NullAllowed] IAppGroupAddDialogDelegate aDelegate);

		// @property (nonatomic, weak) id<FBSDKAppGroupAddDialogDelegate> delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		IAppGroupAddDialogDelegate Delegate { get; set; }

		// @property (copy, nonatomic) FBSDKAppGroupContent * content;
		[NullAllowed]
		[Export ("content", ArgumentSemantic.Copy)]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		AppGroupContent Content { get; set; }

		// -(BOOL)canShow;
		[Export ("canShow")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		bool CanShow { get; }

		// -(BOOL)show;
		[Export ("show")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		bool Show ();

		// -(BOOL)validateWithError:(NSError **)errorRef;
		[Export ("validateWithError:")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		bool Validate (out NSError error);
	}

	interface IAppGroupAddDialogDelegate {

	}

	// @protocol FBSDKAppGroupAddDialogDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "FBSDKAppGroupAddDialogDelegate")]
	[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
	interface AppGroupAddDialogDelegate {

		// @required -(void)appGroupAddDialog:(FBSDKAppGroupAddDialog *)appGroupAddDialog didCompleteWithResults:(NSDictionary *)results;
		[Abstract]
		[EventArgs ("AppGroupAddDialogCompleted")]
		[EventName ("Completed")]
		[Export ("appGroupAddDialog:didCompleteWithResults:")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		void DidComplete (AppGroupAddDialog appGroupAddDialog, NSDictionary results);

		// @required -(void)appGroupAddDialog:(FBSDKAppGroupAddDialog *)appGroupAddDialog didFailWithError:(NSError *)error;
		[Abstract]
		[EventArgs ("AppGroupAddDialogFailed")]
		[EventName ("Failed")]
		[Export ("appGroupAddDialog:didFailWithError:")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		void DidFail (AppGroupAddDialog appGroupAddDialog, NSError error);

		// @required -(void)appGroupAddDialogDidCancel:(FBSDKAppGroupAddDialog *)appGroupAddDialog;
		[Abstract]
		[EventArgs ("AppGroupAddDialogCancelled")]
		[EventName ("Cancelled")]
		[Export ("appGroupAddDialogDidCancel:")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		void DidCancel (AppGroupAddDialog appGroupAddDialog);
	}

	// @interface FBSDKAppGroupContent : NSObject <FBSDKCopying, NSSecureCoding>
	[BaseType (typeof (NSObject), Name = "FBSDKAppGroupContent")]
	interface AppGroupContent : CoreKit.ICopying, INSSecureCoding {

		// @property (copy, nonatomic) NSString * groupDescription;
		[Export ("groupDescription", ArgumentSemantic.Copy)]
		string GroupDescription { get; set; }

		// @property (copy, nonatomic) NSString * name;
		[Export ("name", ArgumentSemantic.Copy)]
		string Name { get; set; }

		// @property (assign, nonatomic) FBSDKAppGroupPrivacy privacy;
		[Export ("privacy", ArgumentSemantic.Assign)]
		AppGroupPrivacy Privacy { get; set; }

		// -(BOOL)isEqualToAppGroupContent:(FBSDKAppGroupContent *)content;
		[Export ("isEqualToAppGroupContent:")]
		bool Equals (AppGroupContent content);

		[Obsolete ("Use Equals (AppGroupContent) method overload. This will be removed in future versions.")]
		[Wrap ("Equals (content)")]
		bool IsEqualToAppGroupContent (AppGroupContent content);
	}

	// @interface FBSDKAppGroupJoinDialog : NSObject
	[BaseType (typeof (NSObject),
		Name = "FBSDKAppGroupJoinDialog",
		Delegates = new [] { "Delegate" },
		Events = new [] { typeof (AppGroupJoinDialogDelegate) })]
	[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
	interface AppGroupJoinDialog {

		// +(instancetype)showWithGroupID:(NSString *)groupID delegate:(id<FBSDKAppGroupJoinDialogDelegate>)delegate;
		[Static]
		[Export ("showWithGroupID:delegate:")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		AppGroupJoinDialog Show (string groupID, [NullAllowed] IAppGroupJoinDialogDelegate aDelegate);

		// @property (nonatomic, weak) id<FBSDKAppGroupJoinDialogDelegate> delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		IAppGroupJoinDialogDelegate Delegate { get; set; }

		// @property (copy, nonatomic) NSString * groupID;
		[Export ("groupID", ArgumentSemantic.Copy)]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		string GroupID { get; set; }

		// -(BOOL)canShow;
		[Export ("canShow")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		bool CanShow { get; }

		// -(BOOL)show;
		[Export ("show")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		bool Show ();

		// -(BOOL)validateWithError:(NSError **)errorRef;
		[Export ("validateWithError:")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		bool Validate (out NSError error);
	}

	interface IAppGroupJoinDialogDelegate {

	}

	// @protocol FBSDKAppGroupJoinDialogDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "FBSDKAppGroupJoinDialogDelegate")]
	[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
	interface AppGroupJoinDialogDelegate {

		// @required -(void)appGroupJoinDialog:(FBSDKAppGroupJoinDialog *)appGroupJoinDialog didCompleteWithResults:(NSDictionary *)results;
		[Abstract]
		[EventArgs ("AppGroupJoinDialogCompleted")]
		[EventName ("Completed")]
		[Export ("appGroupJoinDialog:didCompleteWithResults:")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		void DidComplete (AppGroupJoinDialog appGroupJoinDialog, NSDictionary results);

		// @required -(void)appGroupJoinDialog:(FBSDKAppGroupJoinDialog *)appGroupJoinDialog didFailWithError:(NSError *)error;
		[Abstract]
		[EventArgs ("AppGroupJoinDialogFailed")]
		[EventName ("Failed")]
		[Export ("appGroupJoinDialog:didFailWithError:")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		void DidFail (AppGroupJoinDialog appGroupJoinDialog, NSError error);

		// @required -(void)appGroupJoinDialogDidCancel:(FBSDKAppGroupJoinDialog *)appGroupJoinDialog;
		[Abstract]
		[EventArgs ("AppGroupJoinDialogCancelled")]
		[EventName ("Cancelled")]
		[Export ("appGroupJoinDialogDidCancel:")]
		[Obsolete ("App and game groups are being deprecated. See https://developers.facebook.com/docs/games/services/game-groups for more information.")]
		void DidCancel (AppGroupJoinDialog appGroupJoinDialog);
	}

	// @interface FBSDKAppInviteContent : NSObject <FBSDKCopying, NSSecureCoding>
	[BaseType (typeof (NSObject), Name = "FBSDKAppInviteContent")]
	interface AppInviteContent : CoreKit.ICopying, SharingValidation, INSSecureCoding {

		// @property (copy, nonatomic) NSURL * appLinkURL;
		[NullAllowed]
		[Export ("appLinkURL", ArgumentSemantic.Copy)]
		NSUrl AppLinkUrl { get; set; }

		[Obsolete ("Use AppLinkUrl property instead. This will be removed in future versions.")]
		[Wrap ("AppLinkUrl")]
		NSUrl AppLinkURL { get; set; }

		// @property (nonatomic, copy) NSURL *appInvitePreviewImageURL;
		[NullAllowed]
		[Export ("appInvitePreviewImageURL", ArgumentSemantic.Copy)]
		NSUrl PreviewImageUrl { get; set; }

		[Obsolete ("Use PreviewImageUrl property instead. This will be removed in future versions.")]
		[Wrap ("PreviewImageUrl")]
		NSUrl PreviewImageURL { get; set; }

		// @property (nonatomic, copy) NSString *promotionCode;
		[Export ("promotionCode")]
		string PromotionCode { get; set; }

		// @property (nonatomic, copy) NSString *promotionText;
		[Export ("promotionText")]
		string PromotionText { get; set; }

		// @property FBSDKAppInviteDestination destination;
		[Export ("destination")]
		AppInviteDestination Destination { get; set; }

		// -(BOOL)isEqualToAppInviteContent:(FBSDKAppInviteContent *)content;
		[Export ("isEqualToAppInviteContent:")]
		bool Equals (AppInviteContent content);

		[Obsolete ("Use Equals (AppInviteContent) method overload. This will be removed in future versions.")]
		[Wrap ("Equals (content)")]
		bool IsEqualToAppInviteContent (AppInviteContent content);
	}

	// @interface FBSDKAppInviteDialog : NSObject
	[Obsolete ("App Invites no longer supported")]
	[BaseType (typeof (NSObject),
		Name = "FBSDKAppInviteDialog",
		Delegates = new [] { "Delegate" },
		Events = new [] { typeof (AppInviteDialogDelegate) })]
	interface AppInviteDialog {
		// +(instancetype)showWithContent:(FBSDKAppInviteContent *)content delegate:(id<FBSDKAppInviteDialogDelegate>)delegate;
		[Obsolete ("Use Show (UIViewController, AppInviteContent, IAppInviteDialogDelegate) method instead")]
		[Static]
		[Export ("showWithContent:delegate:")]
		AppInviteDialog Show ([NullAllowed] AppInviteContent content, [NullAllowed] IAppInviteDialogDelegate aDelegate);

		// + (instancetype)showFromViewController:(UIViewController *)viewController withContent:(FBSDKAppInviteContent *)content delegate:(id<FBSDKAppInviteDialogDelegate>)delegate;
		[Static]
		[Export ("showFromViewController:withContent:delegate:")]
		AppInviteDialog Show (UIViewController fromViewController, [NullAllowed] AppInviteContent content, [NullAllowed] IAppInviteDialogDelegate aDelegate);

		// @property (nonatomic, weak) UIViewController *fromViewController;
		[NullAllowed]
		[Export ("fromViewController", ArgumentSemantic.Weak)]
		UIViewController FromViewController { get; set; }

		// @property (nonatomic, weak) id<FBSDKAppInviteDialogDelegate> delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IAppInviteDialogDelegate Delegate { get; set; }

		// @property (copy, nonatomic) FBSDKAppInviteContent * content;
		[NullAllowed]
		[Export ("content", ArgumentSemantic.Copy)]
		AppInviteContent Content { get; set; }

		// -(BOOL)canShow;
		[Export ("canShow")]
		bool CanShow { get; }

		// -(BOOL)show;
		[Export ("show")]
		bool Show ();

		// -(BOOL)validateWithError:(NSError **)errorRef;
		[Export ("validateWithError:")]
		bool Validate (out NSError error);
	}

	interface IAppInviteDialogDelegate {

	}

	// @protocol FBSDKAppInviteDialogDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "FBSDKAppInviteDialogDelegate")]
	interface AppInviteDialogDelegate {

		// @required -(void)appInviteDialog:(FBSDKAppInviteDialog *)appInviteDialog didCompleteWithResults:(NSDictionary *)results;
		[Abstract]
		[EventArgs ("AppInviteDialogCompleted")]
		[EventName ("Completed")]
		[Export ("appInviteDialog:didCompleteWithResults:")]
		void DidComplete (AppInviteDialog appInviteDialog, NSDictionary results);

		// @required -(void)appInviteDialog:(FBSDKAppInviteDialog *)appInviteDialog didFailWithError:(NSError *)error;
		[Abstract]
		[EventArgs ("AppInviteDialogFailed")]
		[EventName ("Failed")]
		[Export ("appInviteDialog:didFailWithError:")]
		void DidFail (AppInviteDialog appInviteDialog, NSError error);
	}

	// @interface FBSDKCameraEffectArguments : NSObject <FBSDKCopying, NSSecureCoding>
	[BaseType (typeof (NSObject), Name = "FBSDKCameraEffectArguments")]
	interface CameraEffectArguments : CoreKit.ICopying, INSSecureCoding {
		// -(void)setString:(NSString *)string forKey:(NSString *)key;
		[Export ("setString:forKey:")]
		void SetString (string aString, string key);

		// -(NSString *)stringForKey:(NSString *)key;
		[Export ("stringForKey:")]
		string GetString (string key);

		// -(void)setArray:(NSArray<NSString *> *)array forKey:(NSString *)key;
		[Export ("setArray:forKey:")]
		void SetArray (string [] array, string key);

		// -(NSArray *)arrayForKey:(NSString *)key;
		[Export ("arrayForKey:")]
		string [] GetArray (string key);
	}

	// @interface FBSDKCameraEffectTextures : NSObject <FBSDKCopying, NSSecureCoding>
	[BaseType (typeof (NSObject), Name = "FBSDKCameraEffectTextures")]
	interface CameraEffectTextures : CoreKit.ICopying, INSSecureCoding {
		// -(void)setImage:(UIImage *)image forKey:(NSString *)key;
		[Export ("setImage:forKey:")]
		void SetImage (UIImage image, string key);

		// -(UIImage *)imageForKey:(NSString *)key;
		[Export ("imageForKey:")]
		UIImage GetImage (string key);
	}

	// @interface FBSDKGameRequestContent : NSObject <FBSDKCopying, NSSecureCoding>
	[BaseType (typeof (NSObject), Name = "FBSDKGameRequestContent")]
	interface GameRequestContent : CoreKit.ICopying, SharingValidation, INSSecureCoding {

		// @property (assign, nonatomic) FBSDKGameRequestActionType actionType;
		[Export ("actionType", ArgumentSemantic.Assign)]
		GameRequestActionType ActionType { get; set; }

		// -(BOOL)isEqualToGameRequestContent:(FBSDKGameRequestContent *)content;
		[Export ("isEqualToGameRequestContent:")]
		bool Equals (GameRequestContent content);

		[Obsolete ("Use Equals (GameRequestContent) method overload. This will be removed in future versions.")]
		[Wrap ("Equals (content)")]
		bool IsEqualToGameRequestContent (GameRequestContent content);

		// @property (copy, nonatomic) NSString * data;
		[Export ("data", ArgumentSemantic.Copy)]
		string Data { get; set; }

		// @property (assign, nonatomic) FBSDKGameRequestFilter filters;
		[Export ("filters", ArgumentSemantic.Assign)]
		GameRequestFilter Filters { get; set; }

		// @property (copy, nonatomic) NSString * message;
		[Export ("message", ArgumentSemantic.Copy)]
		string Message { get; set; }

		// @property (copy, nonatomic) NSString * objectID;
		[Export ("objectID", ArgumentSemantic.Copy)]
		string ObjectId { get; set; }

		[Obsolete ("Use ObjectId property instead. This will be removed in future versions.")]
		[Wrap ("ObjectId")]
		string ObjectID { get; set; }

		// @property (nonatomic, copy) NSArray *recipients;
		[NullAllowed]
		[Export ("recipients", ArgumentSemantic.Copy)]
		string [] Recipients { get; set; }

		// @property (copy, nonatomic) NSArray * recipientSuggestions;
		[NullAllowed]
		[Export ("recipientSuggestions", ArgumentSemantic.Copy)]
		string [] RecipientSuggestions { get; set; }

		// @property (copy, nonatomic) NSArray * to;
		[Obsolete ("Use Recipients property instead")]
		[NullAllowed]
		[Export ("to", ArgumentSemantic.Copy)]
		string [] To { get; set; }

		// @property (copy, nonatomic) NSArray * suggestions;
		[Obsolete ("Use RecipientSuggestions property instead")]
		[NullAllowed]
		[Export ("suggestions", ArgumentSemantic.Copy)]
		string [] Suggestions { get; set; }

		// @property (copy, nonatomic) NSString * title;
		[Export ("title", ArgumentSemantic.Copy)]
		string Title { get; set; }
	}

	// @interface FBSDKGameRequestDialog : NSObject
	[BaseType (typeof (NSObject),
		Name = "FBSDKGameRequestDialog",
		Delegates = new [] { "Delegate" },
		Events = new [] { typeof (GameRequestDialogDelegate) })]
	interface GameRequestDialog {

		// +(instancetype)showWithContent:(FBSDKGameRequestContent *)content delegate:(id<FBSDKGameRequestDialogDelegate>)delegate;
		[Static]
		[Export ("showWithContent:delegate:")]
		GameRequestDialog Show ([NullAllowed] GameRequestContent content, [NullAllowed] IGameRequestDialogDelegate aDelegate);

		// @property (nonatomic, weak) id<FBSDKGameRequestDialogDelegate> delegate;
		[NullAllowed]
		[Export ("delegate", ArgumentSemantic.Weak)]
		IGameRequestDialogDelegate Delegate { get; set; }

		// @property (copy, nonatomic) FBSDKGameRequestContent * content;
		[NullAllowed]
		[Export ("content", ArgumentSemantic.Copy)]
		GameRequestContent Content { get; set; }

		// @property (assign, nonatomic) BOOL frictionlessRequestsEnabled;
		[Export ("frictionlessRequestsEnabled")]
		bool FrictionlessRequestsEnabled { get; set; }

		// -(BOOL)canShow;
		[Export ("canShow")]
		bool CanShow { get; }

		// -(BOOL)show;
		[Export ("show")]
		bool Show ();

		// -(BOOL)validateWithError:(NSError **)errorRef;
		[Export ("validateWithError:")]
		bool Validate (out NSError error);
	}

	interface IGameRequestDialogDelegate {

	}

	// @protocol FBSDKGameRequestDialogDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "FBSDKGameRequestDialogDelegate")]
	interface GameRequestDialogDelegate {

		// @required -(void)gameRequestDialog:(FBSDKGameRequestDialog *)gameRequestDialog didCompleteWithResults:(NSDictionary *)results;
		[Abstract]
		[EventArgs ("GameRequestDialogCompleted")]
		[EventName ("Completed")]
		[Export ("gameRequestDialog:didCompleteWithResults:")]
		void DidComplete (GameRequestDialog gameRequestDialog, NSDictionary results);

		// @required -(void)gameRequestDialog:(FBSDKGameRequestDialog *)gameRequestDialog didFailWithError:(NSError *)error;
		[Abstract]
		[EventArgs ("GameRequestDialogFailed")]
		[EventName ("Failed")]
		[Export ("gameRequestDialog:didFailWithError:")]
		void DidFail (GameRequestDialog gameRequestDialog, NSError error);

		// @required -(void)gameRequestDialogDidCancel:(FBSDKGameRequestDialog *)gameRequestDialog;
		[Abstract]
		[EventArgs ("GameRequestDialogCancelled")]
		[EventName ("Cancelled")]
		[Export ("gameRequestDialogDidCancel:")]
		void DidCancel (GameRequestDialog gameRequestDialog);
	}

	// @interface FBSDKHashtag : NSObject <FBSDKCopying, NSSecureCoding>
	[BaseType (typeof (NSObject), Name = "FBSDKHashtag")]
	interface Hashtag : CoreKit.ICopying, INSSecureCoding {
		// + (instancetype)hashtagWithString:(NSString *)hashtagString;
		[Static]
		[Export ("hashtagWithString:")]
		Hashtag Create (string hashtag);

		// @property (nonatomic, readwrite, copy) NSString *stringRepresentation;
		[Export ("stringRepresentation")]
		string StringRepresentation { get; set; }

		// @property (nonatomic, readonly, assign, getter=isValid) BOOL valid;
		[Export ("valid")]
		bool Valid { [Bind ("isValid")] get; set; }

		// - (BOOL)isEqualToHashtag:(FBSDKHashtag *)hashtag;
		[Export ("isEqualToHashtag:")]
		bool Equals (Hashtag hashtag);
	}

	// @interface FBSDKLikeButton : FBSDKButton <FBSDKLiking>
	[Obsolete]
	[BaseType (typeof (CoreKit.Button), Name = "FBSDKLikeButton")]
	interface LikeButton : Liking {

		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);

		// @property (getter = isSoundEnabled, assign, nonatomic) BOOL soundEnabled;
		[Export ("soundEnabled")]
		bool SoundEnabled { [Bind ("isSoundEnabled")] get; set; }
	}

	// @interface FBSDKLikeControl : UIControl <FBSDKLiking>
	[Obsolete]
	[BaseType (typeof (UIControl), Name = "FBSDKLikeControl")]
	interface LikeControl : Liking {

		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);

		// @property (nonatomic, strong) UIColor * foregroundColor;
		[Export ("foregroundColor", ArgumentSemantic.Strong)]
		UIColor ForegroundColor { get; set; }

		// @property (assign, nonatomic) FBSDKLikeControlAuxiliaryPosition likeControlAuxiliaryPosition;
		[Export ("likeControlAuxiliaryPosition", ArgumentSemantic.Assign)]
		LikeControlAuxiliaryPosition LikeControlAuxiliaryPosition { get; set; }

		// @property (assign, nonatomic) FBSDKLikeControlHorizontalAlignment likeControlHorizontalAlignment;
		[Export ("likeControlHorizontalAlignment", ArgumentSemantic.Assign)]
		LikeControlHorizontalAlignment LikeControlHorizontalAlignment { get; set; }

		// @property (assign, nonatomic) FBSDKLikeControlStyle likeControlStyle;
		[Export ("likeControlStyle", ArgumentSemantic.Assign)]
		LikeControlStyle LikeControlStyle { get; set; }

		// @property (assign, nonatomic) CGFloat preferredMaxLayoutWidth;
		[Export ("preferredMaxLayoutWidth", ArgumentSemantic.Assign)]
		nfloat PreferredMaxLayoutWidth { get; set; }

		// @property (getter = isSoundEnabled, assign, nonatomic) BOOL soundEnabled;
		[Export ("soundEnabled")]
		bool SoundEnabled { [Bind ("isSoundEnabled")] get; set; }
	}

	interface ILiking {

	}

	// @protocol FBSDKLiking <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "FBSDKLiking")]
	interface Liking {

		// @required @property (copy, nonatomic) NSString * objectID;
		[Export ("objectID")]
		string GetObjectId ();

		[Export ("setObjectID:")]
		void SetObjectId (string id);

		// @required @property (assign, nonatomic) FBSDKLikeObjectType objectType;
		[Export ("objectType")]
		LikeObjectType GetObjectType ();

		[Export ("setObjectType:")]
		void SetObjectType (LikeObjectType type);
	}

	// @interface FBSDKMessageDialog : NSObject <FBSDKSharingDialog>
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "FBSDKMessageDialog")]
	interface MessageDialog : SharingDialog {

		// +(instancetype)showWithContent:(id<FBSDKSharingContent>)content delegate:(id<FBSDKSharingDelegate>)delegate;
		[Static]
		[Export ("showWithContent:delegate:")]
		MessageDialog Show ([NullAllowed] ISharingContent content, [NullAllowed] ISharingDelegate aDelegate);
	}

	// @interface FBSDKSendButton : FBSDKButton <FBSDKSharingButton>
	[BaseType (typeof (CoreKit.Button), Name = "FBSDKSendButton")]
	interface SendButton : SharingButton {

		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);
	}

	// @interface FBSDKShareAPI : NSObject <FBSDKSharing>
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "FBSDKShareAPI")]
	interface ShareAPI : Sharing {

		// extern NSString *const FBSDKShareErrorDomain;
		[Field ("FBSDKShareErrorDomain", "__Internal")]
		NSString ErrorDomain { get; }

		// +(instancetype)shareWithContent:(id<FBSDKSharingContent>)content delegate:(id<FBSDKSharingDelegate>)delegate;
		[Static]
		[Export ("shareWithContent:delegate:")]
		ShareAPI Share ([NullAllowed] ISharingContent content, [NullAllowed] ISharingDelegate aDelegate);

		// @property (nonatomic, copy) NSString *message;
		[Export ("message", ArgumentSemantic.Copy)]
		string Message { get; set; }

		// @property (nonatomic, copy) NSString *graphNode;
		[Export ("graphNode", ArgumentSemantic.Copy)]
		string GraphNode { get; set; }

		// @property (nonatomic, strong) FBSDKAccessToken *accessToken;
		[NullAllowed]
		[Export ("accessToken", ArgumentSemantic.Strong)]
		CoreKit.AccessToken AccessToken { get; set; }

		// -(BOOL)canShare;
		[Export ("canShare")]
		bool CanShare ();

		// -(BOOL)createOpenGraphObject:(FBSDKShareOpenGraphObject *)openGraphObject;
		[Export ("createOpenGraphObject:")]
		bool CreateOpenGraphObject (ShareOpenGraphObject openGraphObject);

		// -(BOOL)share;
		[Export ("share")]
		bool Share ();
	}

	// @interface FBSDKShareButton : FBSDKButton <FBSDKSharingButton>
	[BaseType (typeof (CoreKit.Button), Name = "FBSDKShareButton")]
	interface ShareButton : SharingButton {

		[Export ("initWithFrame:")]
		IntPtr Constructor (CGRect frame);
	}

	// @interface FBSDKShareCameraEffectContent : NSObject <FBSDKSharingContent>
	[BaseType (typeof (NSObject), Name = "FBSDKShareCameraEffectContent")]
	interface ShareCameraEffectContent : SharingContent, SharingScheme {
		// @property (copy, nonatomic) NSString * effectID;
		[Export ("effectID")]
		string EffectId { get; set; }

		// @property (copy, nonatomic) FBSDKCameraEffectArguments * effectArguments;
		[Export ("effectArguments", ArgumentSemantic.Copy)]
		CameraEffectArguments EffectArguments { get; set; }

		// @property (copy, nonatomic) FBSDKCameraEffectTextures * effectTextures;
		[Export ("effectTextures", ArgumentSemantic.Copy)]
		CameraEffectTextures EffectTextures { get; set; }

		// -(BOOL)isEqualToShareCameraEffectContent:(FBSDKShareCameraEffectContent *)content;
		[Export ("isEqualToShareCameraEffectContent:")]
		bool Equals (ShareCameraEffectContent content);
	}

	// @interface FBSDKShareDialog : NSObject <FBSDKSharingDialog>
	[BaseType (typeof (NSObject), Name = "FBSDKShareDialog")]
	interface ShareDialog : SharingDialog {

		// +(instancetype)showFromViewController:(UIViewController *)viewController withContent:(id<FBSDKSharingContent>)content delegate:(id<FBSDKSharingDelegate>)delegate;
		[Static]
		[Export ("showFromViewController:withContent:delegate:")]
		ShareDialog Show (UIViewController viewController, [NullAllowed] ISharingContent content, [NullAllowed] ISharingDelegate aDelegate);

		// @property (nonatomic, weak) UIViewController * fromViewController;
		[NullAllowed]
		[Export ("fromViewController", ArgumentSemantic.Weak)]
		UIViewController FromViewController { get; set; }

		// @property (assign, nonatomic) FBSDKShareDialogMode mode;
		[Export ("mode", ArgumentSemantic.Assign)]
		ShareDialogMode Mode { get; set; }
	}

	// @interface FBSDKShareLinkContent : NSObject <FBSDKSharingContent>
	[BaseType (typeof (NSObject), Name = "FBSDKShareLinkContent")]
	interface ShareLinkContent : SharingContent {

		// @property (copy, nonatomic) NSString * contentDescription;
		[Obsolete ("This property is deprecated from Graph API 2.9. See https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations")]
		[Export ("contentDescription")]
		string ContentDescription { get; }

		// @property (copy, nonatomic) NSString * contentTitle;
		[Obsolete ("This property is deprecated from Graph API 2.9. See https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations")]
		[Export ("contentTitle")]
		string ContentTitle { get; }

		// @property (copy, nonatomic) NSURL * imageURL;
		[Obsolete ("This property is deprecated from Graph API 2.9. See https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations")]
		[NullAllowed]
		[Export ("imageURL")]
		NSUrl ImageURL { get; }

		// @property (nonatomic, copy) NSString *quote;
		[Export ("quote")]
		string Quote { get; set; }

		// -(BOOL)isEqualToShareLinkContent:(FBSDKShareLinkContent *)content;
		[Export ("isEqualToShareLinkContent:")]
		bool Equals (ShareLinkContent content);

		[Obsolete ("Use Equals (ShareLinkContent) method overload instead. This will be removed in future version.")]
		[Wrap ("Equals (content)")]
		bool IsEqualToShareLinkContent (ShareLinkContent content);
	}

	// @interface FBSDKShareMediaContent : NSObject <FBSDKSharingContent>
	[BaseType (typeof (NSObject), Name = "FBSDKShareMediaContent")]
	interface ShareMediaContent {
		// @property (nonatomic, copy) NSArray *media;
		[Export ("media", ArgumentSemantic.Copy)]
		NSObject [] Media { get; set; }

		// - (BOOL)isEqualToShareMediaContent:(FBSDKShareMediaContent *)content;
		[Export ("isEqualToShareMediaContent:")]
		bool Equals (ShareMediaContent content);
	}

	interface IShareMessengerActionButton { }

	// @protocol FBSDKShareMessengerActionButton <FBSDKCopying, NSSecureCoding>
	[Protocol (Name = "FBSDKShareMessengerActionButton")]
	interface ShareMessengerActionButton : CoreKit.ICopying, INSSecureCoding {
		// @required @property (copy, nonatomic) NSString * title;
		[Abstract]
		[Export ("title")]
		string Title { get; set; }
	}

	// @interface FBSDKShareMessengerGenericTemplateContent : NSObject <FBSDKSharingContent>
	[BaseType (typeof (NSObject), Name = "FBSDKShareMessengerGenericTemplateContent")]
	interface ShareMessengerGenericTemplateContent : SharingContent {
		// @property (assign, nonatomic) BOOL isSharable;
		[Export ("isSharable")]
		bool IsSharable { get; set; }

		// @property (assign, nonatomic) FBSDKShareMessengerGenericTemplateImageAspectRatio imageAspectRatio;
		[Export ("imageAspectRatio", ArgumentSemantic.Assign)]
		ShareMessengerGenericTemplateImageAspectRatio ImageAspectRatio { get; set; }

		// @property (copy, nonatomic) FBSDKShareMessengerGenericTemplateElement * element;
		[Export ("element", ArgumentSemantic.Copy)]
		ShareMessengerGenericTemplateElement Element { get; set; }
	}

	// @interface FBSDKShareMessengerGenericTemplateElement : NSObject <FBSDKCopying, NSSecureCoding>
	[BaseType (typeof (NSObject), Name = "FBSDKShareMessengerGenericTemplateElement")]
	interface ShareMessengerGenericTemplateElement : CoreKit.ICopying, INSSecureCoding {
		// @property (copy, nonatomic) NSString * title;
		[Export ("title")]
		string Title { get; set; }

		// @property (copy, nonatomic) NSString * subtitle;
		[Export ("subtitle")]
		string Subtitle { get; set; }

		// @property (copy, nonatomic) NSURL * imageURL;
		[Export ("imageURL", ArgumentSemantic.Copy)]
		NSUrl ImageUrl { get; set; }

		// @property (copy, nonatomic) id<FBSDKShareMessengerActionButton> defaultAction;
		[Export ("defaultAction", ArgumentSemantic.Copy)]
		IShareMessengerActionButton DefaultAction { get; set; }

		// @property (copy, nonatomic) id<FBSDKShareMessengerActionButton> button;
		[Export ("button", ArgumentSemantic.Copy)]
		IShareMessengerActionButton Button { get; set; }
	}

	// @interface FBSDKShareMessengerMediaTemplateContent : NSObject <FBSDKSharingContent>
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "FBSDKShareMessengerMediaTemplateContent")]
	interface ShareMessengerMediaTemplateContent : SharingContent {
		// @property (assign, nonatomic) FBSDKShareMessengerMediaTemplateMediaType mediaType;
		[Export ("mediaType", ArgumentSemantic.Assign)]
		ShareMessengerMediaTemplateMediaType MediaType { get; set; }

		// @property (readonly, copy, nonatomic) NSString * attachmentID;
		[Export ("attachmentID")]
		string AttachmentId { get; }

		// @property (readonly, copy, nonatomic) NSURL * mediaURL;
		[Export ("mediaURL", ArgumentSemantic.Copy)]
		NSUrl MediaUrl { get; }

		// @property (copy, nonatomic) id<FBSDKShareMessengerActionButton> button;
		[Export ("button", ArgumentSemantic.Copy)]
		IShareMessengerActionButton Button { get; set; }

		// -(instancetype)initWithAttachmentID:(NSString *)attachmentID;
		[Export ("initWithAttachmentID:")]
		IntPtr Constructor (string attachmentId);

		// -(instancetype)initWithMediaURL:(NSURL *)mediaURL;
		[Export ("initWithMediaURL:")]
		IntPtr Constructor (NSUrl mediaUrl);
	}

	// @interface FBSDKShareMessengerOpenGraphMusicTemplateContent : NSObject <FBSDKSharingContent>
	[BaseType (typeof (NSObject), Name = "FBSDKShareMessengerOpenGraphMusicTemplateContent")]
	interface ShareMessengerOpenGraphMusicTemplateContent : SharingContent {
		// @property (copy, nonatomic) NSURL * url;
		[Export ("url", ArgumentSemantic.Copy)]
		NSUrl Url { get; set; }

		// @property (copy, nonatomic) id<FBSDKShareMessengerActionButton> button;
		[Export ("button", ArgumentSemantic.Copy)]
		IShareMessengerActionButton Button { get; set; }
	}

	// @interface FBSDKShareMessengerURLActionButton : NSObject <FBSDKShareMessengerActionButton>
	[BaseType (typeof (NSObject), Name = "FBSDKShareMessengerURLActionButton")]
	interface ShareMessengerUrlActionButton : ShareMessengerActionButton {
		// @property (copy, nonatomic) NSURL * url;
		[Export ("url", ArgumentSemantic.Copy)]
		NSUrl Url { get; set; }

		// @property (assign, nonatomic) FBSDKShareMessengerURLActionButtonWebviewHeightRatio webviewHeightRatio;
		[Export ("webviewHeightRatio", ArgumentSemantic.Assign)]
		ShareMessengerURLActionButtonWebviewHeightRatio WebviewHeightRatio { get; set; }

		// @property (assign, nonatomic) BOOL isMessengerExtensionURL;
		[Export ("isMessengerExtensionURL")]
		bool IsMessengerExtensionUrl { get; set; }

		// @property (copy, nonatomic) NSURL * fallbackURL;
		[Export ("fallbackURL", ArgumentSemantic.Copy)]
		NSUrl FallbackUrl { get; set; }

		// @property (assign, nonatomic) BOOL shouldHideWebviewShareButton;
		[Export ("shouldHideWebviewShareButton")]
		bool ShouldHideWebviewShareButton { get; set; }
	}

	// @interface FBSDKShareOpenGraphAction : FBSDKShareOpenGraphValueContainer <FBSDKCopying, NSSecureCoding>
	[DisableDefaultCtor]
	[BaseType (typeof (ShareOpenGraphValueContainer), Name = "FBSDKShareOpenGraphAction")]
	interface ShareOpenGraphAction : CoreKit.ICopying, INSSecureCoding {

		// +(instancetype)actionWithType:(NSString *)actionType object:(FBSDKShareOpenGraphObject *)object key:(NSString *)key;
		[Static]
		[Export ("actionWithType:object:key:")]
		ShareOpenGraphAction Action (string actionType, [NullAllowed] ShareOpenGraphObject graphObject, string key);

		// +(instancetype)actionWithType:(NSString *)actionType objectID:(NSString *)objectID key:(NSString *)key;
		[Static]
		[Export ("actionWithType:objectID:key:")]
		ShareOpenGraphAction Action (string actionType, string objectID, string key);

		// +(instancetype)actionWithType:(NSString *)actionType objectURL:(NSURL *)objectURL key:(NSString *)key;
		[Static]
		[Export ("actionWithType:objectURL:key:")]
		ShareOpenGraphAction Action (string actionType, [NullAllowed] NSUrl objectUrl, string key);

		// @property (copy, nonatomic) NSString * actionType;
		[Export ("actionType", ArgumentSemantic.Copy)]
		string ActionType { get; set; }

		// -(BOOL)isEqualToShareOpenGraphAction:(FBSDKShareOpenGraphAction *)action;
		[Export ("isEqualToShareOpenGraphAction:")]
		bool Equals (ShareOpenGraphAction action);

		[Obsolete ("Use Equals (ShareOpenGraphAction) method overload instead. This will be removed in future version.")]
		[Wrap ("Equals (action)")]
		bool IsEqualToShareOpenGraphAction (ShareOpenGraphAction action);
	}

	// @interface FBSDKShareOpenGraphContent : NSObject <FBSDKSharingContent>
	[BaseType (typeof (NSObject), Name = "FBSDKShareOpenGraphContent")]
	interface ShareOpenGraphContent : SharingContent {

		// @property (copy, nonatomic) FBSDKShareOpenGraphAction * action;
		[NullAllowed]
		[Export ("action", ArgumentSemantic.Copy)]
		ShareOpenGraphAction Action { get; set; }

		// @property (copy, nonatomic) NSString * previewPropertyName;
		[Export ("previewPropertyName", ArgumentSemantic.Copy)]
		string PreviewPropertyName { get; set; }

		// -(BOOL)isEqualToShareOpenGraphContent:(FBSDKShareOpenGraphContent *)content;
		[Export ("isEqualToShareOpenGraphContent:")]
		bool Equals (ShareOpenGraphContent content);

		[Obsolete ("Use Equals (ShareOpenGraphContent) method overload instead. This will be removed in future version.")]
		[Wrap ("Equals (content)")]
		bool IsEqualToShareOpenGraphContent (ShareOpenGraphContent content);
	}

	// @interface FBSDKShareOpenGraphObject : FBSDKShareOpenGraphValueContainer <FBSDKCopying, NSSecureCoding>
	[DisableDefaultCtor]
	[BaseType (typeof (ShareOpenGraphValueContainer), Name = "FBSDKShareOpenGraphObject")]
	interface ShareOpenGraphObject : CoreKit.ICopying, INSSecureCoding {

		// +(instancetype)objectWithProperties:(NSDictionary *)properties;
		[Static]
		[Export ("objectWithProperties:")]
		ShareOpenGraphObject Create ([NullAllowed] NSDictionary properties);

		[Obsolete ("Use Create method instead. This will be removed in future versions.")]
		[Static]
		[Wrap ("Create (properties)")]
		ShareOpenGraphObject ObjectWithProperties (NSDictionary properties);

		// -(BOOL)isEqualToShareOpenGraphObject:(FBSDKShareOpenGraphObject *)object;
		[Export ("isEqualToShareOpenGraphObject:")]
		bool Equals (ShareOpenGraphObject aObject);

		[Obsolete ("Use Equals (ShareOpenGraphObject) method overload instead. This will be removed in future version.")]
		[Wrap ("Equals (aObject)")]
		bool IsEqualToShareOpenGraphObject (ShareOpenGraphObject aObject);
	}

	interface IShareOpenGraphValueContaining {

	}

	delegate void ShareOpenGraphValueContainingEnumerateHandle (string key, NSObject id, ref bool stop);

	// @protocol FBSDKShareOpenGraphValueContaining <NSObject, NSSecureCoding>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "FBSDKShareOpenGraphValueContaining")]
	interface ShareOpenGraphValueContaining : INSSecureCoding {

		// @required -(NSArray *)arrayForKey:(NSString *)key;
		[Abstract]
		[Export ("arrayForKey:")]
		NSObject [] ArrayForKey (string key);

		// @required -(void)enumerateKeysAndObjectsUsingBlock:(void (^)(NSString *, id, BOOL *))block;
		[Abstract]
		[Export ("enumerateKeysAndObjectsUsingBlock:")]
		unsafe void EnumerateKeysAndObjectsUsingBlock (ShareOpenGraphValueContainingEnumerateHandle handle);

		// @required -(NSEnumerator *)keyEnumerator;
		[Abstract]
		[Export ("keyEnumerator")]
		NSEnumerator KeyEnumerator ();

		// @required -(NSNumber *)numberForKey:(NSString *)key;
		[Abstract]
		[Export ("numberForKey:")]
		NSNumber NumberForKey (string key);

		// @required -(NSEnumerator *)objectEnumerator;
		[Abstract]
		[Export ("objectEnumerator")]
		NSEnumerator ObjectEnumerator ();

		// @required -(FBSDKShareOpenGraphObject *)objectForKey:(NSString *)key;
		[Abstract]
		[Export ("objectForKey:")]
		ShareOpenGraphObject ObjectForKey (string key);

		// @required -(id)objectForKeyedSubscript:(NSString *)key;
		[Abstract]
		[Export ("objectForKeyedSubscript:")]
		NSObject ObjectForKeyedSubscript (string key);

		// @required -(void)parseProperties:(NSDictionary *)properties;
		[Abstract]
		[Export ("parseProperties:")]
		void ParseProperties (NSDictionary properties);

		// @required -(FBSDKSharePhoto *)photoForKey:(NSString *)key;
		[Abstract]
		[Export ("photoForKey:")]
		SharePhoto PhotoForKey (string key);

		// @required -(void)removeObjectForKey:(NSString *)key;
		[Abstract]
		[Export ("removeObjectForKey:")]
		void RemoveObjectForKey (string key);

		// @required -(void)setArray:(NSArray *)array forKey:(NSString *)key;
		[Abstract]
		[Export ("setArray:forKey:")]
		void SetArray (NSObject [] array, string key);

		// @required -(void)setNumber:(NSNumber *)number forKey:(NSString *)key;
		[Abstract]
		[Export ("setNumber:forKey:")]
		void SetNumber (NSNumber number, string key);

		// @required -(void)setObject:(FBSDKShareOpenGraphObject *)object forKey:(NSString *)key;
		[Abstract]
		[Export ("setObject:forKey:")]
		void SetObject (ShareOpenGraphObject graphObject, string key);

		// @required -(void)setPhoto:(FBSDKSharePhoto *)photo forKey:(NSString *)key;
		[Abstract]
		[Export ("setPhoto:forKey:")]
		void SetPhoto (SharePhoto photo, string key);

		// @required -(void)setString:(NSString *)string forKey:(NSString *)key;
		[Abstract]
		[Export ("setString:forKey:")]
		void SetString (string aString, string key);

		// @required -(void)setURL:(NSURL *)URL forKey:(NSString *)key;
		[Abstract]
		[Export ("setURL:forKey:")]
		void SetUrl (NSUrl Url, string key);

		// @required -(NSString *)stringForKey:(NSString *)key;
		[Abstract]
		[Export ("stringForKey:")]
		string GetString (string key);

		// @required -(NSURL *)URLForKey:(NSString *)key;
		[Abstract]
		[Export ("URLForKey:")]
		NSUrl GetUrl (string key);
	}

	// @interface FBSDKShareOpenGraphValueContainer : NSObject <FBSDKShareOpenGraphValueContaining>
	[BaseType (typeof (NSObject), Name = "FBSDKShareOpenGraphValueContainer")]
	interface ShareOpenGraphValueContainer : ShareOpenGraphValueContaining {

	}

	// @interface FBSDKSharePhoto : NSObject <FBSDKCopying, NSSecureCoding>
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "FBSDKSharePhoto")]
	interface SharePhoto : CoreKit.ICopying, SharingValidation, INSSecureCoding {

		// +(instancetype)photoWithImage:(UIImage *)image userGenerated:(BOOL)userGenerated;
		[Static]
		[Export ("photoWithImage:userGenerated:")]
		SharePhoto From ([NullAllowed] UIImage image, bool userGenerated);

		// +(instancetype)photoWithImageURL:(NSURL *)imageURL userGenerated:(BOOL)userGenerated;
		[Static]
		[Export ("photoWithImageURL:userGenerated:")]
		SharePhoto From ([NullAllowed] NSUrl imageURL, bool userGenerated);

		// +(instancetype)photoWithPhotoAsset:(PHAsset *)photoAsset userGenerated:(BOOL)userGenerated;
		[Static]
		[Export ("photoWithPhotoAsset:userGenerated:")]
		SharePhoto From (PHAsset photoAsset, bool userGenerated);

		// @property (nonatomic, strong) UIImage * image;
		[NullAllowed]
		[Export ("image", ArgumentSemantic.Strong)]
		UIImage Image { get; set; }

		// @property (copy, nonatomic) NSURL * imageURL;
		[NullAllowed]
		[Export ("imageURL", ArgumentSemantic.Copy)]
		NSUrl ImageUrl { get; set; }

		// @property (copy, nonatomic) PHAsset * photoAsset;
		[Export ("photoAsset", ArgumentSemantic.Copy)]
		PHAsset PhotoAsset { get; set; }

		// @property (getter = isUserGenerated, assign, nonatomic) BOOL userGenerated;
		[Export ("userGenerated")]
		bool UserGenerated { [Bind ("isUserGenerated")] get; set; }

		// -(BOOL)isEqualToSharePhoto:(FBSDKSharePhoto *)photo;
		[Export ("isEqualToSharePhoto:")]
		bool Equals (SharePhoto photo);

		[Obsolete ("Use Equals (SharePhoto) overload method instead. This will be removed in future versions.")]
		[Wrap ("Equals (photo)")]
		bool IsEqualToSharePhoto (SharePhoto photo);

		// @property (nonatomic, copy) NSString *caption;
		[Export ("caption", ArgumentSemantic.Copy)]
		string Caption { get; set; }
	}

	// @interface FBSDKSharePhotoContent : NSObject <FBSDKSharingContent>
	[BaseType (typeof (NSObject), Name = "FBSDKSharePhotoContent")]
	interface SharePhotoContent : SharingContent {

		// @property (copy, nonatomic) NSArray * photos;
		[NullAllowed]
		[Export ("photos", ArgumentSemantic.Copy)]
		SharePhoto [] Photos { get; set; }

		// -(BOOL)isEqualToSharePhotoContent:(FBSDKSharePhotoContent *)content;
		[Export ("isEqualToSharePhotoContent:")]
		bool Equals (SharePhotoContent content);

		[Obsolete ("Use Equals (SharePhotoContent) overload method instead. This will be removed in future versions.")]
		[Wrap ("Equals (content)")]
		bool IsEqualToSharePhotoContent (SharePhotoContent content);
	}

	// @interface FBSDKShareVideo : NSObject <FBSDKCopying, NSSecureCoding>
	[DisableDefaultCtor]
	[BaseType (typeof (NSObject), Name = "FBSDKShareVideo")]
	interface ShareVideo : CoreKit.ICopying, SharingValidation, INSSecureCoding {
		// +(instancetype)videoWithData:(NSData *)data;
		[Static]
		[Export ("videoWithData:")]
		ShareVideo From (NSData data);

		// +(instancetype)videoWithData:(NSData *)data previewPhoto:(FBSDKSharePhoto *)previewPhoto;
		[Static]
		[Export ("videoWithData:previewPhoto:")]
		ShareVideo From (NSData data, SharePhoto previewPhoto);

		// + (instancetype)videoWithVideoAsset:(PHAsset *)videoAsset;
		[Static]
		[Export ("videoWithVideoAsset:")]
		ShareVideo From ([NullAllowed] PHAsset videoAsset);

		// + (instancetype)videoWithVideoAsset:(PHAsset *)videoAsset previewPhoto:(FBSDKSharePhoto *)previewPhoto;
		[Static]
		[Export ("videoWithVideoAsset:previewPhoto:")]
		ShareVideo From ([NullAllowed] PHAsset videoAsset, [NullAllowed] SharePhoto previewPhoto);

		// +(instancetype)videoWithVideoURL:(NSURL *)videoURL;
		[Static]
		[Export ("videoWithVideoURL:")]
		ShareVideo From ([NullAllowed] NSUrl videoURL);

		// + (instancetype)videoWithVideoURL:(NSURL *)videoURL previewPhoto:(FBSDKSharePhoto *)previewPhoto;
		[Static]
		[Export ("videoWithVideoURL:previewPhoto:")]
		ShareVideo From ([NullAllowed] NSUrl videoURL, [NullAllowed] SharePhoto previewPhoto);

		// @property (nonatomic, strong) NSData * data;
		[Export ("data", ArgumentSemantic.Strong)]
		NSData Data { get; set; }

		// @property (nonatomic, copy) PHAsset *videoAsset;
		[NullAllowed]
		[Export ("videoAsset", ArgumentSemantic.Copy)]
		PHAsset VideoAsset { get; set; }

		// @property (copy, nonatomic) NSURL * videoURL;
		[NullAllowed]
		[Export ("videoURL", ArgumentSemantic.Copy)]
		NSUrl VideoUrl { get; set; }

		// @property (nonatomic, copy) FBSDKSharePhoto *previewPhoto;
		[NullAllowed]
		[Export ("previewPhoto", ArgumentSemantic.Copy)]
		SharePhoto PreviewPhoto { get; set; }

		// -(BOOL)isEqualToShareVideo:(FBSDKShareVideo *)video;
		[Export ("isEqualToShareVideo:")]
		bool Equals (ShareVideo video);

		[Obsolete ("Use Equals (ShareVideo) overload method instead. This will be removed in future versions.")]
		[Wrap ("Equals (video)")]
		bool IsEqualToShareVideo (ShareVideo video);
	}

	// @interface FBSDKShareVideoContent : NSObject <FBSDKSharingContent>
	[BaseType (typeof (NSObject), Name = "FBSDKShareVideoContent")]
	interface ShareVideoContent : SharingContent {

		// @property (copy, nonatomic) FBSDKSharePhoto * previewPhoto;
		[NullAllowed]
		[Export ("previewPhoto", ArgumentSemantic.Copy)]
		SharePhoto PreviewPhoto { get; set; }

		// @property (copy, nonatomic) FBSDKShareVideo * video;
		[Obsolete ("Use `Video.PreviewPhoto` propety instead.")]
		[NullAllowed]
		[Export ("video", ArgumentSemantic.Copy)]
		ShareVideo Video { get; set; }

		// -(BOOL)isEqualToShareVideoContent:(FBSDKShareVideoContent *)content;
		[Export ("isEqualToShareVideoContent:")]
		bool Equals (ShareVideoContent content);

		[Obsolete ("Use Equals (ShareVideoContent) overload method instead. This will be removed in future versions.")]
		[Wrap ("Equals (content)")]
		bool IsEqualToShareVideoContent (ShareVideoContent content);
	}

	interface ISharing {

	}

	// @protocol FBSDKSharing <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "FBSDKSharing")]
	interface Sharing {

		// @required @property (nonatomic, weak) id<FBSDKSharingDelegate> delegate;
		[Export ("delegate")]
		ISharingDelegate GetDelegate ();

		[Export ("setDelegate:")]
		void SetDelegate ([NullAllowed] ISharingDelegate aDelegate);

		// @required @property (copy, nonatomic) id<FBSDKSharingContent> shareContent;
		[Export ("shareContent")]
		ISharingContent GetShareContent ();

		[Export ("setShareContent:")]
		void SetShareContent ([NullAllowed] ISharingContent shareContent);

		// @required @property (assign, nonatomic) BOOL shouldFailOnDataError;
		[Export ("shouldFailOnDataError")]
		bool GetShouldFailOnDataError ();

		[Export ("setShouldFailOnDataError:")]
		void SetShouldFailOnDataError (bool shouldFail);

		// @required -(BOOL)validateWithError:(NSError **)errorRef;
		[Export ("validateWithError:")]
		bool Validate (out NSError errorRef);
	}

	interface ISharingDialog {

	}

	// @protocol FBSDKSharingDialog <FBSDKSharing>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "FBSDKSharingDialog")]
	interface SharingDialog : Sharing {

		// @required -(BOOL)canShow;
		[Abstract]
		[Export ("canShow")]
		bool CanShow ();

		// @required -(BOOL)show;
		[Abstract]
		[Export ("show")]
		bool Show ();
	}

	interface ISharingDelegate {

	}

	// @protocol FBSDKSharingDelegate <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "FBSDKSharingDelegate")]
	interface SharingDelegate {

		// @required -(void)sharer:(id<FBSDKSharing>)sharer didCompleteWithResults:(NSDictionary *)results;
		[Abstract]
		[Export ("sharer:didCompleteWithResults:")]
		void DidComplete (ISharing sharer, NSDictionary results);

		// @required -(void)sharer:(id<FBSDKSharing>)sharer didFailWithError:(NSError *)error;
		[Abstract]
		[Export ("sharer:didFailWithError:")]
		void DidFail (ISharing sharer, NSError error);

		// @required -(void)sharerDidCancel:(id<FBSDKSharing>)sharer;
		[Abstract]
		[Export ("sharerDidCancel:")]
		void DidCancel (ISharing sharer);
	}

	interface ISharingButton {

	}

	// @protocol FBSDKSharingButton <NSObject>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "FBSDKSharingButton")]
	interface SharingButton {

		// @required @property (copy, nonatomic) id<FBSDKSharingContent> shareContent;
		[Abstract]
		[Export ("shareContent")]
		ISharingContent GetShareContent ();

		[Abstract]
		[Export ("setShareContent:")]
		void SetShareContent ([NullAllowed] ISharingContent shareContent);
	}

	interface ISharingContent {

	}

	// @protocol FBSDKSharingContent <FBSDKCopying, NSSecureCoding>
	[Model (AutoGeneratedName = true)]
	[Protocol]
	[BaseType (typeof (NSObject), Name = "FBSDKSharingContent")]
	interface SharingContent : CoreKit.ICopying, SharingValidation, INSSecureCoding {

		// @required @property (copy, nonatomic) NSURL * contentURL;
		[Abstract]
		[Export ("contentURL")]
		NSUrl GetContentUrl ();

		[Abstract]
		[Export ("setContentURL:")]
		void SetContentUrl ([NullAllowed] NSUrl url);

		// @required @property (copy, nonatomic) NSArray * peopleIDs;
		[Abstract]
		[Export ("peopleIDs")]
		string [] GetPeopleIds ();

		[Abstract]
		[Export ("setPeopleIDs:")]
		void SetPeopleIds ([NullAllowed] string [] peolpleId);

		// @required @property (copy, nonatomic) NSString * placeID;
		[Abstract]
		[Export ("placeID")]
		string GetPlaceId ();

		[Abstract]
		[Export ("setPlaceID:")]
		void SetPlaceId (string placeId);

		// @property (nonatomic, copy) FBSDKHashtag *hashtag;
		[Abstract]
		[Export ("hashtag", ArgumentSemantic.Copy)]
		Hashtag Hashtag { get; set; }

		// @required @property (copy, nonatomic) NSString * ref;
		[Abstract]
		[Export ("ref")]
		string GetRef ();

		[Abstract]
		[Export ("setRef:")]
		void SetRef (string aRef);

		// @required @property (copy, nonatomic) NSString * pageID;
		[Abstract]
		[Export ("pageID")]
		string PageId { get; set; }

		// @required @property (readonly, copy, nonatomic) NSString * shareUUID;
		[Abstract]
		[Export ("shareUUID")]
		string ShareUuid { get; }

		// @required -(NSDictionary<NSString *,id> *)addParameters:(NSDictionary<NSString *,id> *)existingParameters bridgeOptions:(FBSDKShareBridgeOptions)bridgeOptions;
		[Abstract]
		[Export ("addParameters:bridgeOptions:")]
		NSDictionary<NSString, NSObject> AddParameters (NSDictionary<NSString, NSObject> existingParameters, ShareBridgeOptions bridgeOptions);

		// @required -(void)addToParameters:(NSMutableDictionary<NSString *,id> *)parameters bridgeOptions:(FBSDKShareBridgeOptions)bridgeOptions __attribute__((deprecated("`addToParameters` is deprecated. Use `addParameters`")));
		[Abstract]
		[Export ("addToParameters:bridgeOptions:")]
		void AddToParameters (NSMutableDictionary<NSString, NSObject> parameters, ShareBridgeOptions bridgeOptions);
	}

	interface ISharingScheme { }

	// @protocol FBSDKSharingScheme
	[Protocol (Name = "FBSDKSharingScheme")]
	interface SharingScheme {
		// @required -(NSString * _Nullable)schemeForMode:(FBSDKShareDialogMode)mode;
		[Abstract]
		[return: NullAllowed]
		[Export ("schemeForMode:")]
		string GetScheme (ShareDialogMode mode);
	}

	interface ISharingValidation { }

	// @protocol FBSDKSharingValidation
	[Protocol (Name = "FBSDKSharingValidation")]
	interface SharingValidation {
		// @required -(BOOL)validateWithOptions:(FBSDKShareBridgeOptions)bridgeOptions error:(NSError **)errorRef;
		[Abstract]
		[Export ("validateWithOptions:error:")]
		bool Validate (ShareBridgeOptions bridgeOptions, out NSError errorRef);
	}
}
